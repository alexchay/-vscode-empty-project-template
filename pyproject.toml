[project]
name = "empty-python-project"
version = "0.1.2"
description = "Empty Python project template for VSCode"
authors = [{ email = "alexchay@gmail.com" }, { name = "Alexander Chaikovsky" }]

readme = "README.md"
keywords = ["vscode", "python", "project"]
requires-python = ">=3.9"
license = "MIT"

[project.urls]
homepage = "https://alexchay.github.io/"
repository = "https://github.com/alexchay/vscode-empty-python-project-template"

[tool.poetry]
name = "empty-python-project"
version = "0.1.2"
description = "Empty Python project template for VSCode"
authors = ["Alexander Chaikovsky <alexchay@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://alexchay.github.io/"
repository = "https://github.com/alexchay/vscode-empty-python-project-template"
keywords = ["vscode", "python", "project"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
]
packages = [{ include = "empty_project", from = "src" }]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# [build-system]
# requires = ["setuptools", "wheel"]
# build-backend = "setuptools.build_meta"

# main dependency group
# poetry install --only main
[tool.poetry.dependencies]
python = "^3.9"

# poetry install --with dev
[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
pylint = "^2.8.3"
ruff = "^0.0.270"
commitizen = "*"
bump2version = "*"
bpython = "*"
pdbpp = "*"
#flake8 = "*"
#flake8-bugbear = "*"
mypy = "*"
mypy-extensions = "^1.0.0"
black = { version = "*", allow-prereleases = true }
rope = "*"
types-setuptools = "*"
pre-commit = "^3.3.1"
tox = "^4.6.2"
cookiecutter = "^2.1.1"

# poetry install --with docs
[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"

# poetry install --with test
[tool.poetry.group.test]
optional = true
[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "^3.0.0"
pytest-custom-exit-code = "*"

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "vault",
]


[tool.poetry.scripts]
empty-project = "empty_project.main:main"


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_type = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
bump_message = "bump: version $current_version â†’ $new_version"
annotated_tag = false
version_files = ["VERSION", "pyproject.toml:version"]


[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_return_any = true
warn_no_return = true
warn_unreachable = true

[tool.ruff]
# Increase the maximum line length to 150 characters.
line-length = 150
src = ["src", "tests"]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    # "I",  # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]
